# Read in data
#Load[name = input, file = 'input1.spd', n_predictors = 2,n_responses = 2]
Load[name = input, file = 'input.spd', n_predictors = 2,n_responses = 1]

CreateAxes[name = ax_2d, bounds = '1 9 | 1 6']
#CreateSample[name = test_data, axes = ax_2d, grid_points = (10,10),labels = (x1,x2)]
CreateSample[name = test_data, axes = ax_2d, grid_points = (100,100),labels = (x1,x2)]

#CreateAxes[name = ax_2d, bounds = '-2 2 | 0.2 1.8']
#CreateSample[name = test_data, axes = ax_2d, grid_points = (100,100),labels = (x1,x2)]
 
 
 #CreateSurface[name = kriging_input,        data = input, type = mars]
 #CreateSurface[name = kriging_input,        data = input, type = rbf]
 #CreateSurface[name = kriging_input,        data = input, type = ann]
 #CreateSurface[name = kriging_input,        data = input, type = mls]
 #CreateSurface[name = kriging_input,        data = input, type = polynomial, order = 3]
 #CreateSurface[name = kriging_input,        data = input, type = polynomial, order = 2]
 #CreateSurface[name = kriging_input,        data = input, type = polynomial, order = 1]
 
#CreateSurface[name = kriging_input,        data = input, type = kriging]
#nugget will filter noisy
 CreateSurface[name = kriging_input,        data = input, type = kriging, nugget = 0.001]

#CreateSurface[name = kriging_input,        data = input, type = kriging, find_nugget = 0]
#CreateSurface[name = kriging_input,        data = input, type = kriging, optimization_method = local ]
#CreateSurface[name = kriging_input_global, data = input, type = kriging, lower_bounds = (-4.5, -4.5), upper_bounds = (4.5, 4.5), optimization_method = global ]
#CreateSurface[name = kriging_input_local,  data = input, type = kriging, lower_bounds = (-4.5, -4.5), upper_bounds = (4.5, 4.5), optimization_method = local ]


 
 Evaluate[surface = kriging_input,  data = test_data, label = kriging]
#Evaluate[surface = kriging_input_global = test_data, label = kriging]
#Evaluate[surface = kriging_input_local, data = test_data, label = kriging]
 
 Save[data = test_data, file = 'test_data.spd']
  
  
  


 

#CreateSurface[name = kriging_cfd_user_corr, data = cfd, type = kriging,correlations = (1.0)]



#CreateSurface[name = kriging_peaks_multi_local_corr, data = peaks_data, type = kriging, lower_bounds = (-3.0, -3.0), upper_bounds = (3.0, 3.0), optimization_method = local, num_starts = 17 ]
#CreateSurface[name = kriging_peaks_sampling_corr, data = peaks_data, type = kriging, lower_bounds = (-3.0, -3.0), upper_bounds = (3.0, 3.0), optimization_method = sampling, max_trials = 17 ]
#CreateSurface[name = kriging_peaks_user_corr, data = peaks_data, type = kriging,correlation_lengths = (0.335428, 2.68286), optimization_method = none] #these lengths are the ones found using global optimization with all 20 points, a linear trend, and -3.0 <= xr <= 3.0



#Fitness[surface = poly1_peaks, data = peaks_data, metric = press]
#Fitness[surface = poly2_peaks, data = peaks_data, metric = press]
#Fitness[surface = poly3_peaks, data = peaks_data, metric = press]
#Fitness[surface = kriging_peaks_global_corr, data = peaks_data, metric = press]
#Fitness[surface = kriging_peaks_local_corr, data = peaks_data, metric = press]
#Fitness[surface = kriging_peaks_multi_local_corr, data = peaks_data, metric = press]
#Fitness[surface = kriging_peaks_sampling_corr, data = peaks_data, metric = press]
#Fitness[surface = kriging_peaks_user_corr, data = peaks_data, metric = press]
#Fitness[surface = ann_peaks, data = peaks_data, metric = press]

#Fitness[surface = poly1_peaks, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = poly2_peaks, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = poly3_peaks, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = kriging_peaks_global_corr, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = kriging_peaks_local_corr, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = kriging_peaks_multi_local_corr, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = kriging_peaks_sampling_corr, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = kriging_peaks_user_corr, data = peaks_data, metric = root_mean_squared]
#Fitness[surface = ann_peaks, data = peaks_data, metric = root_mean_squared]

#Fitness[surface = poly1_peaks, data = peaks_data, metric = rsquared]
#Fitness[surface = poly2_peaks, data = peaks_data, metric = rsquared]
#Fitness[surface = poly3_peaks, data = peaks_data, metric = rsquared]


